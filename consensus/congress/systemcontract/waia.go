package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus/congress/vmcaller"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	waiaContractAddr        = common.HexToAddress("0xEC4C225F734a614B6d6f61b5Ddf0ae96c8e85E32")
	waiaContractAddrTestnet = common.HexToAddress("0x5900343DD73367fEBC0dB13C6108D54f3d85832d")

	waiaAdmin        = common.HexToAddress("0xAc69359A0BC3ce19C6d9a2b799313A2Ff3D8c06D")
	waiaAdminTestnet = common.HexToAddress("0xbBd28644e777a824C89Ba2563F99085AfB0e80E6")
)

const (
	waiaV2Code = "0x6080604052600436106101145760003560e01c806370a08231116100a0578063c4d66de811610064578063c4d66de814610514578063d0e30db014610114578063dd62ed3e14610547578063f851a44014610582578063fb48270c1461059757610114565b806370a082311461032d57806395d89b4114610360578063a9059cbb14610375578063b84c8246146103ae578063c47f00271461046157610114565b806323b872dd116100e757806323b872dd1461023157806326782247146102745780632e1a7d4d146102a5578063313ce567146102cf5780634fb9e9b7146102fa57610114565b806306fdde031461011e578063095ea7b3146101a8578063158ef93e146101f557806318160ddd1461020a575b61011c6105ac565b005b34801561012a57600080fd5b506101336105fb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016d578181015183820152602001610155565b50505050905090810190601f16801561019a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b457600080fd5b506101e1600480360360408110156101cb57600080fd5b506001600160a01b038135169060200135610689565b604080519115158252519081900360200190f35b34801561020157600080fd5b506101e16106ef565b34801561021657600080fd5b5061021f6106f8565b60408051918252519081900360200190f35b34801561023d57600080fd5b506101e16004803603606081101561025457600080fd5b506001600160a01b038135811691602081013590911690604001356106fc565b34801561028057600080fd5b50610289610830565b604080516001600160a01b039092168252519081900360200190f35b3480156102b157600080fd5b5061011c600480360360208110156102c857600080fd5b503561083f565b3480156102db57600080fd5b506102e46108d4565b6040805160ff9092168252519081900360200190f35b34801561030657600080fd5b5061011c6004803603602081101561031d57600080fd5b50356001600160a01b03166108dd565b34801561033957600080fd5b5061021f6004803603602081101561035057600080fd5b50356001600160a01b0316610978565b34801561036c57600080fd5b5061013361098a565b34801561038157600080fd5b506101e16004803603604081101561039857600080fd5b506001600160a01b0381351690602001356109e4565b3480156103ba57600080fd5b506101e1600480360360208110156103d157600080fd5b8101906020810181356401000000008111156103ec57600080fd5b8201836020820111156103fe57600080fd5b8035906020019184600183028401116401000000008311171561042057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109f8945050505050565b34801561046d57600080fd5b506101e16004803603602081101561048457600080fd5b81019060208101813564010000000081111561049f57600080fd5b8201836020820111156104b157600080fd5b803590602001918460018302840111640100000000831117156104d357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bfd945050505050565b34801561052057600080fd5b5061011c6004803603602081101561053757600080fd5b50356001600160a01b0316610d5d565b34801561055357600080fd5b5061021f6004803603604081101561056a57600080fd5b506001600160a01b0381358116916020013516610dda565b34801561058e57600080fd5b50610289610df7565b3480156105a357600080fd5b5061011c610e0b565b33600081815260036020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106815780601f1061065657610100808354040283529160200191610681565b820191906000526020600020905b81548152906001019060200180831161066457829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055460ff1681565b4790565b6001600160a01b03831660009081526003602052604081205482111561072157600080fd5b6001600160a01b038416331480159061075f57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b156107bf576001600160a01b038416600090815260046020908152604080832033845290915290205482111561079457600080fd5b6001600160a01b03841660009081526004602090815260408083203384529091529020805483900390555b6001600160a01b03808516600081815260036020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b6006546001600160a01b031681565b3360009081526003602052604090205481111561085b57600080fd5b33600081815260036020526040808220805485900390555183156108fc0291849190818181858888f1935050505015801561089a573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b60025460ff1681565b60055461010090046001600160a01b0316331461092e576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b60036020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106815780601f1061065657610100808354040283529160200191610681565b60006109f13384846106fc565b9392505050565b60055460009061010090046001600160a01b03163314610a4c576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b50508651939450610af393600193506020880192509050610ec7565b507fd7ad744cc76ebad190995130eec8ba506b3605612d23b5b9cef8e27f14d138b48184604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610b58578181015183820152602001610b40565b50505050905090810190601f168015610b855780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610bb8578181015183820152602001610ba0565b50505050905090810190601f168015610be55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a150600192915050565b60055460009061010090046001600160a01b03163314610c51576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610cdd5780601f10610cb257610100808354040283529160200191610cdd565b820191906000526020600020905b815481529060010190602001808311610cc057829003601f168201915b50508651939450610cf993600093506020880192509050610ec7565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a81846040518080602001806020018381038352858181518152602001915080519060200190808383600083811015610b58578181015183820152602001610b40565b60055460ff1615610dab576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6005805460ff196001600160a01b0390931661010002610100600160a81b031990911617919091166001179055565b600460209081526000928352604080842090915290825290205481565b60055461010090046001600160a01b031681565b6006546001600160a01b03163314610e5b576040805162461bcd60e51b815260206004820152600e60248201526d4e65772061646d696e206f6e6c7960901b604482015290519081900360640190fd5b6006805460058054610100600160a81b0319166101006001600160a01b03808516820292909217928390556001600160a01b0319909316909355604051919004909116907f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c90600090a2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f0857805160ff1916838001178555610f35565b82800160010185558215610f35579182015b82811115610f35578251825591602001919060010190610f1a565b50610f41929150610f45565b5090565b5b80821115610f415760008155600101610f4656fea2646970667358221220e4b4879fc43efe6cab542099bb5a480238f849a6a12f2d759499bf1ea07ebd7564736f6c634300060c0033"
)

type hardForkWAIA struct {
}

func (s *hardForkWAIA) GetName() string {
	return WAIAContractName
}

func (s *hardForkWAIA) getContractAddrByChainId(chainId *big.Int, height *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.GetChainId(height)) == 0 {
		return waiaContractAddr
	}

	return waiaContractAddrTestnet
}

func (s *hardForkWAIA) getAdminByChainId(chainId *big.Int, header *types.Header) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.GetChainId(header.Number)) == 0 {
		return waiaAdmin
	}

	return waiaAdminTestnet
}

func (s *hardForkWAIA) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(waiaV2Code)

	//write waiaV2Code to WAIA contract
	addr := s.getContractAddrByChainId(config.GetChainId(height), height)
	state.SetCode(addr, contractCode)
	log.Debug("Upgrade code to waia contract account", "addr", addr.String(), "code", waiaV2Code)

	return
}

func (s *hardForkWAIA) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[WAIAContractName].Pack(method, s.getAdminByChainId(config.GetChainId(header.Number), header))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	addr := s.getContractAddrByChainId(config.GetChainId(header.Number), header.Number)
	msg := vmcaller.NewLegacyMessage(header.Coinbase, &addr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)
	_, err = vmcaller.ExecuteMsg(msg, state, header, chainContext, config)

	return
}
